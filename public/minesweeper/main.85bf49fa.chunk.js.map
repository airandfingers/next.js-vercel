{"version":3,"sources":["types.ts","actions.ts","components/NewGameForm.tsx","components/GameHeader.tsx","components/Board.tsx","utils.ts","reducers.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["POSITION_VALUE","CELL_DISPLAY","GAME_STATUS","BOARD_ACTION","createNewGameAction","width","height","numMines","newGameAction","type","NEW_GAME","payload","undefined","boardSize","NumberInputwithLabel","label","value","min","max","setValue","htmlFor","id","onChange","e","parseInt","target","NewGameForm","dispatch","useState","setWidth","setHeight","setNumMines","onSubmit","preventDefault","STATUS_TO_BUTTON_TEXT","UNINITIALIZED","NEW","IN_PROGRESS","LOST","WON","GameHeader","status","numFlags","numMinesRemaining","statusText","onClick","Cell","stateClass","onContextMenu","cellState","rowNum","colNum","contents","textContent","FLAG","TOGGLE_FLAG","createToggleFlagAction","OPEN_CELL","createOpenCellAction","className","React","memo","Row","cellStates","map","prevProps","nextProps","length","every","i","Board","boardState","cellStatesByRowNum","numCells","push","slice","copyBoardState","cell","NUM_ADJACENT_MINES_TO_POSITION_VALUE","EMPTY","ONE","TWO","THREE","FOUR","FIVE","SIX","SEVEN","EIGHT","getAdjacentPositions","position","calculateRowColFromPosition","edges","adjacentPositions","setCellContents","newContents","revealMines","positionInfos","mineReplacement","forEach","MINE","FALSE_FLAG","gameReducer","gameState","newBoardSize","newNumMines","newBoardState","numOpened","calculatePositionFromRowCol","minePositions","positionInfo","has","numAdjacentMines","filter","calculatePositionInfos","firstClickPosition","randomPositions","Set","numPositionsToGenerate","numGenerated","shouldInvert","add","Math","random","generateMinePositions","console","log","EXPLODED_MINE","initialPosition","cellsToOpen","adjacentIndex","openCell","newNumFlags","error","App","useReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85bf49fa.chunk.js","sourcesContent":["import { Dispatch } from 'react'\n\nexport enum POSITION_VALUE {\n  // Mine or number a cell will reveal when clicked\n  MINE = '💣',\n  EMPTY = '',\n  ONE = '1',\n  TWO = '2',\n  THREE = '3',\n  FOUR = '4',\n  FIVE = '5',\n  SIX = '6',\n  SEVEN = '7',\n  EIGHT = '8',\n}\nexport enum CELL_DISPLAY {\n  // States a cell can take, depending on user interaction\n  NEW = '',\n  FLAG = '🚩',\n  FALSE_FLAG = '🎌',\n  EXPLODED_MINE = '💥',\n}\nexport type CELL_CONTENTS = POSITION_VALUE | CELL_DISPLAY\nexport type CellState = {\n  contents: CELL_CONTENTS\n}\nexport type BoardState = Array<CellState>\n\nexport type Position = number\n\nexport type PositionInfo = {\n  value: POSITION_VALUE,\n  adjacentPositions?: Position[]\n}\n\nexport type BoardSize = {\n  width: number,\n  height: number\n}\n\nexport enum GAME_STATUS {\n  UNINITIALIZED = 'UNINITIALIZED',\n  NEW = 'NEW',\n  IN_PROGRESS = 'IN_PROGRESS',\n  WON = 'WON',\n  LOST = 'LOST'\n}\nexport type GameState = {\n  status: GAME_STATUS,\n  boardState: BoardState,\n  numFlags: number,\n  boardSize: BoardSize\n  numMines: number,\n  positionInfos: PositionInfo[],\n  numOpened: number\n}\n\nexport enum BOARD_ACTION {\n  NEW_GAME = 'NEW_GAME',\n  OPEN_CELL = 'OPEN_CELL',\n  TOGGLE_FLAG = 'TOGGLE_FLAG',\n}\nexport type NewGamePayload = {\n  boardSize?: BoardSize,\n  numMines?: number\n}\nexport type CellActionPayload = {\n  rowNum: number,\n  colNum: number\n}\nexport type BoardAction =\n  | { type: BOARD_ACTION.NEW_GAME, payload: NewGamePayload }\n  | { type: BOARD_ACTION.OPEN_CELL, payload: CellActionPayload }\n  | { type: BOARD_ACTION.TOGGLE_FLAG, payload: CellActionPayload }\n\nexport type BoardActionDispatch = Dispatch<BoardAction>","import { BoardAction, BOARD_ACTION } from './types'\n\nexport const createNewGameAction = (width?: number, height?: number, numMines?: number): BoardAction => {\n  const newGameAction: BoardAction = {\n    type: BOARD_ACTION.NEW_GAME,\n    payload: {}\n  }\n  if (width !== undefined && height !== undefined && numMines !== undefined) {\n    newGameAction.payload = {\n      boardSize: {\n        width,\n        height\n      },\n      numMines\n    }\n  }\n  return newGameAction\n}\n\nexport const createOpenCellAction = (rowNum: number, colNum: number,): BoardAction => {\n  return {\n    type: BOARD_ACTION.OPEN_CELL,\n    payload: {\n      rowNum,\n      colNum\n    }\n  }\n}\n\nexport const createToggleFlagAction = (rowNum: number, colNum: number,): BoardAction => {\n  return {\n    type: BOARD_ACTION.TOGGLE_FLAG,\n    payload: {\n      rowNum,\n      colNum\n    }\n  }\n}","import React, { FunctionComponent, SyntheticEvent, useState } from 'react';\nimport { createNewGameAction } from '../actions';\nimport { BoardActionDispatch } from '../types'\n\ntype NumberInputWithLabelProps = {\n  label: string,\n  value: number,\n  setValue: (value: number) => void\n  min: number,\n  max: number\n}\nconst NumberInputwithLabel: FunctionComponent<NumberInputWithLabelProps> = ({ label, value, min, max, setValue }) =>  {\n  const onChange = (e: SyntheticEvent) => setValue(parseInt((e.target as HTMLInputElement).value))\n  return (\n    <>\n      <label htmlFor={label}>{label}</label>\n      <input type=\"number\" id={label} {...{ value, min, max, onChange }} />\n    </>\n  )\n}\n\ntype NewGameFormProps = {\n  dispatch: BoardActionDispatch\n}\nconst NewGameForm: FunctionComponent<NewGameFormProps> = ({ dispatch }) => {\n  const [width, setWidth] = useState(30)\n  const [height, setHeight] = useState(16)\n  const [numMines, setNumMines] = useState(99)\n  const onSubmit = (e: SyntheticEvent) => {\n    e.preventDefault()\n    dispatch(createNewGameAction(width, height, numMines))\n  }\n  return (\n    <form onSubmit={onSubmit}>\n      <NumberInputwithLabel label=\"Width\" value={width} min={1} max={10000} setValue={setWidth} />\n      <NumberInputwithLabel label=\"Height\" value={height} min={1} max={10000} setValue={setHeight} />\n      <NumberInputwithLabel label=\"# Mines\" value={numMines} min={0} max={10000} setValue={setNumMines} />\n      <input type=\"submit\" value=\"Start New Game\" />\n    </form>\n  )\n}\n\nexport default NewGameForm","import React, { FunctionComponent } from 'react';\nimport { createNewGameAction } from '../actions';\nimport { BoardActionDispatch, GAME_STATUS } from '../types'\n\nconst STATUS_TO_BUTTON_TEXT = {\n  [GAME_STATUS.UNINITIALIZED]: '🐱',\n  [GAME_STATUS.NEW]: '😺',\n  [GAME_STATUS.IN_PROGRESS]: '😺',\n  [GAME_STATUS.LOST]: '😿',\n  [GAME_STATUS.WON]: '😻'\n}\n\ntype GameHeaderProps = {\n  status: GAME_STATUS,\n  numMines: number,\n  numFlags: number,\n  dispatch: BoardActionDispatch,\n}\nconst GameHeader: FunctionComponent<GameHeaderProps> = ({ status, numMines, numFlags, dispatch }) => {\n  const numMinesRemaining = numMines - numFlags\n  let statusText = `${numMinesRemaining} mines remaining`\n  if (numMinesRemaining === 1) statusText = `1 mine remaining`\n  if (status === GAME_STATUS.WON) statusText = 'You win!'\n  if (status === GAME_STATUS.LOST) statusText = 'You lose!'\n  \n  const onClick = () => dispatch(createNewGameAction())\n\n  return (\n    <div>\n      <span>{statusText}</span>\n      &nbsp;\n      <button onClick={onClick}>{STATUS_TO_BUTTON_TEXT[status]}</button>\n    </div>\n  )\n}\n\nexport default GameHeader","import React, { FunctionComponent, SyntheticEvent } from 'react';\nimport { createOpenCellAction, createToggleFlagAction } from '../actions';\nimport { GameState, CellState, BoardActionDispatch, CELL_DISPLAY } from '../types'\n\ntype CellProps = {\n  cellState: CellState,\n  rowNum: number,\n  colNum: number,\n  dispatch: BoardActionDispatch,\n}\nlet Cell: FunctionComponent<CellProps> = ({ cellState, rowNum, colNum, dispatch }) => {\n  const { contents } = cellState\n  let stateClass\n  let onClick\n  let onContextMenu\n  let textContent: String | null = cellState.contents // CELL_CONTENTS values match what we want to display except for NEW\n  if (contents === CELL_DISPLAY.NEW || contents === CELL_DISPLAY.FLAG) {\n    stateClass = 'closed'\n    onContextMenu = (e: SyntheticEvent) => {\n      e.preventDefault()\n      dispatch(createToggleFlagAction(rowNum, colNum))\n    }\n    if (contents === CELL_DISPLAY.NEW) {\n      onClick = () => dispatch(createOpenCellAction(rowNum, colNum))\n      textContent = null\n    }\n  } else {\n    stateClass = 'open'\n  }\n  return <td className={`cell noselect ${stateClass}`} {...{ onClick, onContextMenu }}>{textContent}</td>\n}\nCell = React.memo(Cell)\n\ntype RowProps = {\n  cellStates: CellState[],\n  rowNum: number,\n  dispatch: BoardActionDispatch,\n}\nlet Row: FunctionComponent<RowProps> = ({ cellStates, rowNum, dispatch }) => (\n  <tr className=\"row\" key={`row-${rowNum}`}>\n    {cellStates.map((cellState, colNum) => (\n      <Cell key={`cell-${rowNum}.${colNum}`} {...{ cellState, rowNum, colNum, dispatch }} />\n    ))}\n  </tr>\n)\nRow = React.memo(Row, (prevProps, nextProps) =>\n  prevProps.cellStates.length === nextProps.cellStates.length &&\n  prevProps.cellStates.every((cellState, i) => cellState.contents === nextProps.cellStates[i].contents)\n)\n\ntype BoardProps = GameState & {\n  dispatch: BoardActionDispatch,\n}\nconst Board: FunctionComponent<BoardProps> = ({ boardState, boardSize: { width, height }, dispatch }) => {\n  const cellStatesByRowNum = []\n  const numCells = width * height\n  for (let i = 0; i < numCells; i += width) {\n    cellStatesByRowNum.push(boardState.slice(i, i + width))\n  }\n\n  return (\n    <table onContextMenu={(e) => e.preventDefault()}>\n      <tbody>\n        {cellStatesByRowNum.map((cellStates, rowNum) => (\n          <Row key={`row-${rowNum}`} {...{ cellStates, rowNum, dispatch }} />\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nexport default Board","import { BoardState, POSITION_VALUE, PositionInfo, BoardSize, Position } from './types'\n\nexport const copyBoardState = (boardState: BoardState) =>\n  boardState.map((cell) => ({ contents: cell.contents }))\n\nexport const NUM_ADJACENT_MINES_TO_POSITION_VALUE = [\n  POSITION_VALUE.EMPTY,\n  POSITION_VALUE.ONE,\n  POSITION_VALUE.TWO,\n  POSITION_VALUE.THREE,\n  POSITION_VALUE.FOUR,\n  POSITION_VALUE.FIVE,\n  POSITION_VALUE.SIX,\n  POSITION_VALUE.SEVEN,\n  POSITION_VALUE.EIGHT,\n]\n\nexport const calculatePositionFromRowCol = (rowNum: number, colNum: number, { width }: BoardSize): Position => rowNum * width + colNum\n\nexport const calculateRowColFromPosition = (position: Position, { width }: BoardSize): { rowNum: number, colNum: number } => ({\n  rowNum: ~~(position / width), // ~~ = Math.floor\n  colNum: position % width\n})\n\nexport const getAdjacentPositions = (position: Position, { width, height }: BoardSize): Position[] => {\n  const { rowNum, colNum } = calculateRowColFromPosition(position, { width, height })\n  const edges = {\n    left: colNum === 0,\n    top: rowNum === 0,\n    right: colNum === width - 1,\n    bottom: rowNum === height - 1\n  }\n  const adjacentPositions: Position[] = []\n  if (!edges.top) {\n    if (!edges.left) {\n      adjacentPositions.push(position - width - 1)\n    }\n    adjacentPositions.push(position - width)\n    if (!edges.right) {\n      adjacentPositions.push(position - width + 1)\n    }\n  }\n  if (!edges.left) {\n    adjacentPositions.push(position - 1)\n  }\n  if (!edges.right) {\n    adjacentPositions.push(position + 1)\n  }\n  if (!edges.bottom) {\n    if (!edges.left) {\n      adjacentPositions.push(position + width - 1)\n    }\n    adjacentPositions.push(position + width)\n    if (!edges.right) {\n      adjacentPositions.push(position + width + 1)\n    }\n  }\n  return adjacentPositions\n}\n\nexport const generateMinePositions = ({ width, height }: BoardSize, numMines: number, firstClickPosition: Position): Set<number> => {\n  const randomPositions = new Set<number>()\n  const numCells = width * height\n  let numPositionsToGenerate = numMines\n  let numGenerated = 0\n\n  // If mines fill more than half the spots, generate positions free of mines instead\n  let shouldInvert = numMines > numCells / 2\n  if (shouldInvert) {\n    numPositionsToGenerate = numCells - numMines\n    randomPositions.add(firstClickPosition)\n    numGenerated = 1\n  }\n  \n  while (numGenerated < numPositionsToGenerate) {\n    const position = ~~(Math.random() * numCells)\n    if (!randomPositions.has(position) && (shouldInvert || position !== firstClickPosition)) {\n      randomPositions.add(position)\n      numGenerated++\n    }\n  }\n\n  if (!shouldInvert) return randomPositions\n\n  const minePositions = new Set<number>()\n  for (let i = 0; i < numCells; i++) {\n    if (!randomPositions.has(i)) {\n      minePositions.add(i)\n    }\n  }\n  return minePositions\n}\n\nexport const calculatePositionInfos = (boardSize: BoardSize, minePositions: Set<Position>): PositionInfo[] => {\n  const positionInfos: PositionInfo[] = []\n  const numCells = boardSize.width * boardSize.height\n  for (let position = 0; position < numCells; position++) {\n    const positionInfo: PositionInfo = { value: POSITION_VALUE.MINE }\n    if (!minePositions.has(position)) {\n      const adjacentPositions = getAdjacentPositions(position, boardSize)\n      const numAdjacentMines = adjacentPositions.filter((position) => minePositions.has(position)).length\n      positionInfo.value = NUM_ADJACENT_MINES_TO_POSITION_VALUE[numAdjacentMines]\n      positionInfo.adjacentPositions = adjacentPositions\n    }\n    positionInfos.push(positionInfo)\n  }\n  return positionInfos\n}","import { BoardAction, BOARD_ACTION, GameState, BoardState, GAME_STATUS, POSITION_VALUE, CELL_DISPLAY, CellActionPayload, NewGamePayload, BoardSize, Position, PositionInfo, CELL_CONTENTS } from './types'\nimport { copyBoardState, NUM_ADJACENT_MINES_TO_POSITION_VALUE, calculatePositionFromRowCol, generateMinePositions, calculatePositionInfos } from './utils'\n\nconst setCellContents = (position: Position, newContents: CELL_CONTENTS, boardState: BoardState,): void => {\n  boardState[position].contents = newContents\n}\n\nconst revealMines = (positionInfos: PositionInfo[], mineReplacement: CELL_CONTENTS, boardState: BoardState) => {\n  positionInfos.forEach(({ value }: PositionInfo, position: Position) => {\n    const contents = boardState[position].contents\n    if (contents === CELL_DISPLAY.NEW && value === POSITION_VALUE.MINE) {\n      setCellContents(position, mineReplacement, boardState)\n    }\n    else if (contents === CELL_DISPLAY.FLAG && value !== POSITION_VALUE.MINE) {\n      setCellContents(position, CELL_DISPLAY.FALSE_FLAG, boardState)\n    }\n  })\n}\n\nconst openCell = (initialPosition: Position, boardSize: BoardSize, positionInfos: PositionInfo[], boardState: BoardState): number => {\n  const cellsToOpen: Set<Position> = new Set([initialPosition])\n  let numOpened = 0\n  cellsToOpen.forEach((position) => {\n    if (boardState[position].contents !== CELL_DISPLAY.NEW) {\n      // ignore open cells\n      return\n    }\n    const { value, adjacentPositions } = positionInfos[position]\n    setCellContents(position, NUM_ADJACENT_MINES_TO_POSITION_VALUE[parseInt(value, 10)], boardState)\n    numOpened++\n    if (value === POSITION_VALUE.EMPTY && adjacentPositions) {\n      // no mines here, so repeat for any adjacent cells\n      adjacentPositions.forEach((adjacentIndex) => cellsToOpen.add(adjacentIndex))\n    }\n  })\n  return numOpened\n}\n\nexport const gameReducer = (gameState: GameState, { type, payload }: BoardAction): GameState => {\n  const { boardState, numFlags, status, boardSize, numMines } = gameState\n  // console.log('in gameReducer, gameState is', gameState, ', action is', { type, payload })\n  if (type === BOARD_ACTION.NEW_GAME) {\n    let { boardSize: newBoardSize, numMines: newNumMines } = payload as NewGamePayload\n    newBoardSize = newBoardSize ?? boardSize\n    newNumMines = newNumMines ?? numMines\n    const numCells = newBoardSize.width * newBoardSize.height\n    const newBoardState: BoardState = []\n    for (let i = 0; i < numCells; i++) {\n      newBoardState.push({ contents: CELL_DISPLAY.NEW })\n    }\n    return {\n      status: GAME_STATUS.NEW,\n      boardState: newBoardState,\n      numFlags: 0,\n      boardSize: newBoardSize,\n      numMines: newNumMines,\n      positionInfos: [],\n      numOpened: 0,\n    }\n  }\n\n  // action is a CellAction\n  const { rowNum, colNum } = payload as CellActionPayload\n  const position = calculatePositionFromRowCol(rowNum, colNum, boardSize)\n\n  if (type === BOARD_ACTION.OPEN_CELL) {\n    let { status, positionInfos, numOpened } = gameState\n    if (status === GAME_STATUS.NEW) {\n      // first click; populate mines\n      const minePositions = generateMinePositions(boardSize, numMines, position)\n      positionInfos = calculatePositionInfos(boardSize, minePositions)\n      status = GAME_STATUS.IN_PROGRESS\n    }\n    else if (status !== GAME_STATUS.IN_PROGRESS) {\n      console.log('Ignoring OPEN_CELL action dispatched when status is', status)\n      return gameState\n    }\n    const newBoardState = copyBoardState(boardState)\n    console.log(positionInfos, position)\n    if (positionInfos[position].value === POSITION_VALUE.MINE) {\n      setCellContents(position, CELL_DISPLAY.EXPLODED_MINE, newBoardState)\n      status = GAME_STATUS.LOST\n      revealMines(positionInfos, POSITION_VALUE.MINE, newBoardState)\n    }\n    else {\n      numOpened += openCell(position, boardSize, positionInfos, newBoardState)\n      if (numOpened >= boardSize.width * boardSize.height - numMines) {\n        status = GAME_STATUS.WON\n        revealMines(positionInfos, CELL_DISPLAY.FLAG, newBoardState)\n      }\n    }\n    return {\n      ...gameState,\n      status,\n      boardState: newBoardState,\n      positionInfos,\n      numOpened\n    }\n  }\n\n  if (type === BOARD_ACTION.TOGGLE_FLAG) {\n    if (status !== GAME_STATUS.NEW && status !== GAME_STATUS.IN_PROGRESS) {\n      console.log('Ignoring TOGGLE_FLAG action dispatched when status is', status)\n      return gameState\n    }\n    const contents = boardState[position].contents\n    let newContents\n    let newNumFlags\n    if (contents === CELL_DISPLAY.FLAG) {\n      newContents = CELL_DISPLAY.NEW\n      newNumFlags = numFlags - 1\n    }\n    else if (contents === CELL_DISPLAY.NEW) {\n      if (numFlags === gameState.numMines) {\n        console.log('Ignoring TOGGLE_FLAG action', { numFlags, numMines: gameState.numMines })\n        return gameState\n      }\n      newContents = CELL_DISPLAY.FLAG\n      newNumFlags = numFlags + 1\n    }\n    else {\n      console.log('Ignoring TOGGLE_FLAG action dispatched for cell with contents', contents)\n      return gameState\n    }\n    const newBoardState = copyBoardState(boardState)\n    setCellContents(position, newContents, newBoardState)\n    return {\n      ...gameState,\n      boardState: newBoardState,\n      numFlags: newNumFlags\n    }\n  }\n\n  else {\n    // Should never happen\n    console.error('gameReducer called with unknown action:', { type, payload })\n    return gameState\n  }\n}","import React, { useReducer } from 'react';\nimport './App.css';\nimport { GAME_STATUS } from './types'\nimport NewGameForm from './components/NewGameForm'\nimport GameHeader from './components/GameHeader'\nimport Board from './components/Board'\nimport { gameReducer } from './reducers'\n\nconst App = () => {\n  const [gameState, dispatch] = useReducer(gameReducer, {\n    status: GAME_STATUS.UNINITIALIZED,\n    boardState: [],\n    numFlags: 0,\n    boardSize: {\n      width: 0,\n      height: 0,\n    },\n    numMines: 0,\n    positionInfos: [],\n    numOpened: 0\n  })\n  const { status, numMines, numFlags} = gameState\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Minesweeper!</h1>\n      </header>\n      <main>\n        <NewGameForm dispatch={dispatch} />\n        {gameState.status !== GAME_STATUS.UNINITIALIZED && (\n          <div className=\"game\">\n            <GameHeader {...{ status, numMines, numFlags, dispatch }} />\n            <Board {...{ ...gameState, dispatch }} />\n          </div>\n        )}\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}